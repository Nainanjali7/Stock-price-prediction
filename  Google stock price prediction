{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMsGJFnFb0Ph7kq/mXjLS1U",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Nainanjali7/Stock-price-prediction/blob/main/%20Google%20stock%20price%20prediction\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "RT749M8K-9s_"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense,LSTM,Dropout"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('google_train_dataa.csv')\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "r0Sid9uSA0U1",
        "outputId": "66b82584-7ff0-44ef-e671-efc77777345b"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Date    Open    High     Low   Close       Volume\n",
              "0  01-03-2012  325.25  332.83  324.97  663.59    73,80,500\n",
              "1  01-04-2012  331.27  333.87  329.08  666.45    57,49,400\n",
              "2  01-05-2012  329.83  330.75  326.89  657.21    65,90,300\n",
              "3  01-06-2012  328.34  328.77  323.68  648.24    54,05,900\n",
              "4  01-09-2012  322.04  322.29  309.46  620.76  1,16,88,800"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-92085224-0631-4217-b38b-315be00f2ee0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>01-03-2012</td>\n",
              "      <td>325.25</td>\n",
              "      <td>332.83</td>\n",
              "      <td>324.97</td>\n",
              "      <td>663.59</td>\n",
              "      <td>73,80,500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>01-04-2012</td>\n",
              "      <td>331.27</td>\n",
              "      <td>333.87</td>\n",
              "      <td>329.08</td>\n",
              "      <td>666.45</td>\n",
              "      <td>57,49,400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>01-05-2012</td>\n",
              "      <td>329.83</td>\n",
              "      <td>330.75</td>\n",
              "      <td>326.89</td>\n",
              "      <td>657.21</td>\n",
              "      <td>65,90,300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>01-06-2012</td>\n",
              "      <td>328.34</td>\n",
              "      <td>328.77</td>\n",
              "      <td>323.68</td>\n",
              "      <td>648.24</td>\n",
              "      <td>54,05,900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>01-09-2012</td>\n",
              "      <td>322.04</td>\n",
              "      <td>322.29</td>\n",
              "      <td>309.46</td>\n",
              "      <td>620.76</td>\n",
              "      <td>1,16,88,800</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-92085224-0631-4217-b38b-315be00f2ee0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-92085224-0631-4217-b38b-315be00f2ee0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-92085224-0631-4217-b38b-315be00f2ee0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-47c58df4-39d2-4747-9684-6e4feb3664c4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-47c58df4-39d2-4747-9684-6e4feb3664c4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-47c58df4-39d2-4747-9684-6e4feb3664c4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1258,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1258,\n        \"samples\": [\n          \"3/28/2014\",\n          \"5/29/2012\",\n          \"3/16/2012\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 151.90444191569622,\n        \"min\": 279.12,\n        \"max\": 816.68,\n        \"num_unique_values\": 1215,\n        \"samples\": [\n          509.6,\n          536.91,\n          302.89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 153.00881086661113,\n        \"min\": 281.21,\n        \"max\": 816.68,\n        \"num_unique_values\": 1219,\n        \"samples\": [\n          564.88,\n          376.39,\n          304.45\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 150.5528073376812,\n        \"min\": 277.22,\n        \"max\": 805.14,\n        \"num_unique_values\": 1223,\n        \"samples\": [\n          583.4,\n          341.56,\n          335.78\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1241,\n        \"samples\": [\n          \"600.7\",\n          \"605.89\",\n          \"704.36\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1240,\n        \"samples\": [\n          \"37,37,100\",\n          \"78,84,700\",\n          \"29,20,800\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mHxOXHNGA_xX",
        "outputId": "cac80abd-bef0-42b8-d9d4-638c8c197079"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1258 entries, 0 to 1257\n",
            "Data columns (total 6 columns):\n",
            " #   Column  Non-Null Count  Dtype  \n",
            "---  ------  --------------  -----  \n",
            " 0   Date    1258 non-null   object \n",
            " 1   Open    1258 non-null   float64\n",
            " 2   High    1258 non-null   float64\n",
            " 3   Low     1258 non-null   float64\n",
            " 4   Close   1258 non-null   object \n",
            " 5   Volume  1258 non-null   object \n",
            "dtypes: float64(3), object(3)\n",
            "memory usage: 59.1+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"Close\"]=pd.to_numeric(df.Close,errors='coerce')\n",
        "df = df.dropna()\n",
        "trainData = df.iloc[:,4:5].values"
      ],
      "metadata": {
        "id": "qRRt7TtQBBOS"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pFDmBhmUBRTN",
        "outputId": "c2cfc205-4a34-46a6-8398-6b2dec3924ef"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 1149 entries, 0 to 1257\n",
            "Data columns (total 6 columns):\n",
            " #   Column  Non-Null Count  Dtype  \n",
            "---  ------  --------------  -----  \n",
            " 0   Date    1149 non-null   object \n",
            " 1   Open    1149 non-null   float64\n",
            " 2   High    1149 non-null   float64\n",
            " 3   Low     1149 non-null   float64\n",
            " 4   Close   1149 non-null   float64\n",
            " 5   Volume  1149 non-null   object \n",
            "dtypes: float64(4), object(2)\n",
            "memory usage: 62.8+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sc = MinMaxScaler(feature_range=(0,1))\n",
        "trainData = sc.fit_transform(trainData)\n",
        "trainData.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F3_Ep16sBVIj",
        "outputId": "74526c39-c455-463f-a934-3b09f1bbd902"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1149, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train = []\n",
        "y_train = []\n",
        "\n",
        "for i in range (60,1149): #60 : timestep // 1149 : length of the data\n",
        "    X_train.append(trainData[i-60:i,0])\n",
        "    y_train.append(trainData[i,0])\n",
        "\n",
        "X_train,y_train = np.array(X_train),np.array(y_train)"
      ],
      "metadata": {
        "id": "MLmU5RHJBcs9"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train = np.reshape(X_train,(X_train.shape[0],X_train.shape[1],1)) #adding the batch_size axis\n",
        "X_train.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vPo7O0qnBh1D",
        "outputId": "fc75f948-6dcf-4f08-ebf0-a21a3cbb7da2"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1089, 60, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model = Sequential()\n",
        "\n",
        "model.add(LSTM(units=100, return_sequences = True, input_shape =(X_train.shape[1],1)))\n",
        "model.add(Dropout(0.2))\n",
        "\n",
        "model.add(LSTM(units=100, return_sequences = True))\n",
        "model.add(Dropout(0.2))\n",
        "\n",
        "model.add(LSTM(units=100, return_sequences = True))\n",
        "model.add(Dropout(0.2))\n",
        "\n",
        "model.add(LSTM(units=100, return_sequences = False))\n",
        "model.add(Dropout(0.2))\n",
        "\n",
        "model.add(Dense(units =1))\n",
        "model.compile(optimizer='adam',loss=\"mean_squared_error\")"
      ],
      "metadata": {
        "id": "9Vsz15jHft6s"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "hist = model.fit(X_train, y_train, epochs = 20, batch_size = 32, verbose=2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5gIA0qoQfprJ",
        "outputId": "01945839-4c8d-4647-f4f7-310af899978b"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "35/35 - 16s - loss: 0.0462 - 16s/epoch - 447ms/step\n",
            "Epoch 2/20\n",
            "35/35 - 8s - loss: 0.0117 - 8s/epoch - 229ms/step\n",
            "Epoch 3/20\n",
            "35/35 - 5s - loss: 0.0099 - 5s/epoch - 157ms/step\n",
            "Epoch 4/20\n",
            "35/35 - 13s - loss: 0.0077 - 13s/epoch - 359ms/step\n",
            "Epoch 5/20\n",
            "35/35 - 8s - loss: 0.0087 - 8s/epoch - 219ms/step\n",
            "Epoch 6/20\n",
            "35/35 - 8s - loss: 0.0082 - 8s/epoch - 220ms/step\n",
            "Epoch 7/20\n",
            "35/35 - 12s - loss: 0.0069 - 12s/epoch - 356ms/step\n",
            "Epoch 8/20\n",
            "35/35 - 9s - loss: 0.0073 - 9s/epoch - 262ms/step\n",
            "Epoch 9/20\n",
            "35/35 - 5s - loss: 0.0066 - 5s/epoch - 156ms/step\n",
            "Epoch 10/20\n",
            "35/35 - 7s - loss: 0.0073 - 7s/epoch - 196ms/step\n",
            "Epoch 11/20\n",
            "35/35 - 7s - loss: 0.0065 - 7s/epoch - 199ms/step\n",
            "Epoch 12/20\n",
            "35/35 - 9s - loss: 0.0060 - 9s/epoch - 264ms/step\n",
            "Epoch 13/20\n",
            "35/35 - 6s - loss: 0.0072 - 6s/epoch - 158ms/step\n",
            "Epoch 14/20\n",
            "35/35 - 9s - loss: 0.0060 - 9s/epoch - 256ms/step\n",
            "Epoch 15/20\n",
            "35/35 - 6s - loss: 0.0063 - 6s/epoch - 160ms/step\n",
            "Epoch 16/20\n",
            "35/35 - 7s - loss: 0.0217 - 7s/epoch - 197ms/step\n",
            "Epoch 17/20\n",
            "35/35 - 6s - loss: 0.0065 - 6s/epoch - 159ms/step\n",
            "Epoch 18/20\n",
            "35/35 - 7s - loss: 0.0055 - 7s/epoch - 195ms/step\n",
            "Epoch 19/20\n",
            "35/35 - 6s - loss: 0.0077 - 6s/epoch - 158ms/step\n",
            "Epoch 20/20\n",
            "35/35 - 7s - loss: 0.0056 - 7s/epoch - 195ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(hist.history['loss'])\n",
        "plt.title('Training model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train'], loc='upper left')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "qdLC72BzgRFq",
        "outputId": "79b6dece-d860-42f0-afae-fb7f41867430"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "testData = pd.read_csv('google_test_dataa.csv')\n",
        "testData[\"Close\"]=pd.to_numeric(testData.Close,errors='coerce')\n",
        "testData = testData.dropna()\n",
        "testData = testData.iloc[:,4:5]\n",
        "y_test = testData.iloc[60:,0:].values\n",
        "#input array for the model\n",
        "inputClosing = testData.iloc[:,0:].values\n",
        "inputClosing_scaled = sc.transform(inputClosing)\n",
        "inputClosing_scaled.shape\n",
        "X_test = []\n",
        "length = len(testData)\n",
        "timestep = 60\n",
        "for i in range(timestep,length):\n",
        "    X_test.append(inputClosing_scaled[i-timestep:i,0])\n",
        "X_test = np.array(X_test)\n",
        "X_test = np.reshape(X_test,(X_test.shape[0],X_test.shape[1],1))\n",
        "X_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sD516R7NgSqI",
        "outputId": "8c5f2f22-2916-4d7c-a71f-e979fd2cfa35"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(192, 60, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = model.predict(X_test)\n",
        "y_pred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nYvXzbFWggPN",
        "outputId": "890b01ab-a2de-4122-bb42-61851dec5802"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "6/6 [==============================] - 2s 56ms/step\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1.1821529],\n",
              "       [1.1842724],\n",
              "       [1.1930909],\n",
              "       [1.2072679],\n",
              "       [1.2207985],\n",
              "       [1.225582 ],\n",
              "       [1.2198082],\n",
              "       [1.2075628],\n",
              "       [1.1967949],\n",
              "       [1.1908318],\n",
              "       [1.1834292],\n",
              "       [1.1733984],\n",
              "       [1.1638087],\n",
              "       [1.1547595],\n",
              "       [1.1506652],\n",
              "       [1.15203  ],\n",
              "       [1.1640035],\n",
              "       [1.1856995],\n",
              "       [1.213165 ],\n",
              "       [1.2426492],\n",
              "       [1.2604623],\n",
              "       [1.2652183],\n",
              "       [1.2547559],\n",
              "       [1.2336555],\n",
              "       [1.2103146],\n",
              "       [1.1924549],\n",
              "       [1.1827989],\n",
              "       [1.1777009],\n",
              "       [1.1705695],\n",
              "       [1.1616622],\n",
              "       [1.1518633],\n",
              "       [1.1406856],\n",
              "       [1.1246461],\n",
              "       [1.1042509],\n",
              "       [1.0921396],\n",
              "       [1.0940504],\n",
              "       [1.1076484],\n",
              "       [1.1272655],\n",
              "       [1.1488404],\n",
              "       [1.1639836],\n",
              "       [1.1780818],\n",
              "       [1.1928713],\n",
              "       [1.2087477],\n",
              "       [1.2237333],\n",
              "       [1.2349939],\n",
              "       [1.2390949],\n",
              "       [1.2340555],\n",
              "       [1.2270832],\n",
              "       [1.2230161],\n",
              "       [1.2246107],\n",
              "       [1.2324511],\n",
              "       [1.2397518],\n",
              "       [1.2437432],\n",
              "       [1.2437431],\n",
              "       [1.2434537],\n",
              "       [1.2412531],\n",
              "       [1.235409 ],\n",
              "       [1.2311926],\n",
              "       [1.2353445],\n",
              "       [1.2472179],\n",
              "       [1.2667035],\n",
              "       [1.2921057],\n",
              "       [1.3136322],\n",
              "       [1.3234206],\n",
              "       [1.3202376],\n",
              "       [1.3076956],\n",
              "       [1.2952702],\n",
              "       [1.2875249],\n",
              "       [1.2855769],\n",
              "       [1.2868537],\n",
              "       [1.2899723],\n",
              "       [1.2928896],\n",
              "       [1.2918643],\n",
              "       [1.2888097],\n",
              "       [1.28539  ],\n",
              "       [1.2836477],\n",
              "       [1.2842426],\n",
              "       [1.2873328],\n",
              "       [1.2954963],\n",
              "       [1.3088773],\n",
              "       [1.327172 ],\n",
              "       [1.3464361],\n",
              "       [1.3604128],\n",
              "       [1.3665698],\n",
              "       [1.3712872],\n",
              "       [1.3800697],\n",
              "       [1.3928219],\n",
              "       [1.4053631],\n",
              "       [1.4144146],\n",
              "       [1.4187136],\n",
              "       [1.4211911],\n",
              "       [1.4275014],\n",
              "       [1.4391991],\n",
              "       [1.4492813],\n",
              "       [1.4520587],\n",
              "       [1.445793 ],\n",
              "       [1.4311516],\n",
              "       [1.4114211],\n",
              "       [1.3919405],\n",
              "       [1.3800738],\n",
              "       [1.3786767],\n",
              "       [1.3868951],\n",
              "       [1.4024206],\n",
              "       [1.419491 ],\n",
              "       [1.4332796],\n",
              "       [1.4405841],\n",
              "       [1.4423695],\n",
              "       [1.4409378],\n",
              "       [1.4404439],\n",
              "       [1.4426371],\n",
              "       [1.4479918],\n",
              "       [1.4566464],\n",
              "       [1.466698 ],\n",
              "       [1.4780632],\n",
              "       [1.4918485],\n",
              "       [1.5047146],\n",
              "       [1.5154744],\n",
              "       [1.5246248],\n",
              "       [1.5344361],\n",
              "       [1.5268149],\n",
              "       [1.4974933],\n",
              "       [1.4535153],\n",
              "       [1.4099226],\n",
              "       [1.376938 ],\n",
              "       [1.3558562],\n",
              "       [1.3444524],\n",
              "       [1.3398135],\n",
              "       [1.3401392],\n",
              "       [1.3383921],\n",
              "       [1.3309398],\n",
              "       [1.3264991],\n",
              "       [1.3312627],\n",
              "       [1.3420211],\n",
              "       [1.35062  ],\n",
              "       [1.355442 ],\n",
              "       [1.3571258],\n",
              "       [1.355028 ],\n",
              "       [1.348893 ],\n",
              "       [1.3403988],\n",
              "       [1.328671 ],\n",
              "       [1.315486 ],\n",
              "       [1.3008006],\n",
              "       [1.2751815],\n",
              "       [1.2427082],\n",
              "       [1.2083721],\n",
              "       [1.1780916],\n",
              "       [1.1592741],\n",
              "       [1.1561344],\n",
              "       [1.166618 ],\n",
              "       [1.1852047],\n",
              "       [1.2078879],\n",
              "       [1.2298044],\n",
              "       [1.2486229],\n",
              "       [1.2646241],\n",
              "       [1.2771957],\n",
              "       [1.2872717],\n",
              "       [1.2966125],\n",
              "       [1.304055 ],\n",
              "       [1.3038398],\n",
              "       [1.2944118],\n",
              "       [1.2778945],\n",
              "       [1.2593017],\n",
              "       [1.245524 ],\n",
              "       [1.2413706],\n",
              "       [1.248181 ],\n",
              "       [1.2645081],\n",
              "       [1.2831855],\n",
              "       [1.3002765],\n",
              "       [1.3159264],\n",
              "       [1.3300148],\n",
              "       [1.3416976],\n",
              "       [1.3509865],\n",
              "       [1.3580923],\n",
              "       [1.3616467],\n",
              "       [1.3615519],\n",
              "       [1.3559206],\n",
              "       [1.347257 ],\n",
              "       [1.3395244],\n",
              "       [1.3332418],\n",
              "       [1.3276459],\n",
              "       [1.3425866],\n",
              "       [1.3776184],\n",
              "       [1.4202523],\n",
              "       [1.4570485],\n",
              "       [1.479618 ],\n",
              "       [1.4844819],\n",
              "       [1.4680204],\n",
              "       [1.4396645],\n",
              "       [1.4095285],\n",
              "       [1.3896477],\n",
              "       [1.3804322],\n",
              "       [1.3772511]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "predicted_price = sc.inverse_transform(y_pred)"
      ],
      "metadata": {
        "id": "eU2JK8K7gi8D"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(y_test, color = 'red', label = 'Actual Stock Price')\n",
        "plt.plot(predicted_price, color = 'green', label = 'Predicted Stock Price')\n",
        "plt.title('Google stock price prediction')\n",
        "plt.xlabel('Time')\n",
        "plt.ylabel('Stock Price')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "JZPeohAAglgO",
        "outputId": "0f1c8c11-f7b8-4392-b1b9-f64f012fe84e"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}